# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import api_pb2 as api__pb2


class CommunicationsApiStub(object):
    """subscribe(topic: string, onMessage: (message: Buffer) => void): void
    unsubscribe(topic: string, onMessage: (message: Buffer) => void): void
    publish(topic: string, message: Buffer): Promise<void>
    getSubscribers(topic: string): Promise<[]>
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PingChannel = channel.unary_unary(
                '/communicationsapi.CommunicationsApi/PingChannel',
                request_serializer=api__pb2.NoParams.SerializeToString,
                response_deserializer=api__pb2.Response.FromString,
                )
        self.ConnectToCommunicationsNode = channel.unary_stream(
                '/communicationsapi.CommunicationsApi/ConnectToCommunicationsNode',
                request_serializer=api__pb2.NoParams.SerializeToString,
                response_deserializer=api__pb2.Notification.FromString,
                )
        self.EndCommunication = channel.unary_unary(
                '/communicationsapi.CommunicationsApi/EndCommunication',
                request_serializer=api__pb2.NoParams.SerializeToString,
                response_deserializer=api__pb2.Response.FromString,
                )
        self.Publish = channel.unary_unary(
                '/communicationsapi.CommunicationsApi/Publish',
                request_serializer=api__pb2.PublishPayload.SerializeToString,
                response_deserializer=api__pb2.Response.FromString,
                )
        self.Subscribe = channel.unary_unary(
                '/communicationsapi.CommunicationsApi/Subscribe',
                request_serializer=api__pb2.Channel.SerializeToString,
                response_deserializer=api__pb2.Response.FromString,
                )


class CommunicationsApiServicer(object):
    """subscribe(topic: string, onMessage: (message: Buffer) => void): void
    unsubscribe(topic: string, onMessage: (message: Buffer) => void): void
    publish(topic: string, message: Buffer): Promise<void>
    getSubscribers(topic: string): Promise<[]>
    """

    def PingChannel(self, request, context):
        """Server side stream, there's no need for a bidirectional stream, it's only needed so
        The client can be notified of events in their subscriptions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectToCommunicationsNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndCommunication(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Publish(self, request, context):
        """rpc CreateChannel (Channel) returns (Response);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """rpc Unsubscribe (Channel) returns (Response);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommunicationsApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PingChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.PingChannel,
                    request_deserializer=api__pb2.NoParams.FromString,
                    response_serializer=api__pb2.Response.SerializeToString,
            ),
            'ConnectToCommunicationsNode': grpc.unary_stream_rpc_method_handler(
                    servicer.ConnectToCommunicationsNode,
                    request_deserializer=api__pb2.NoParams.FromString,
                    response_serializer=api__pb2.Notification.SerializeToString,
            ),
            'EndCommunication': grpc.unary_unary_rpc_method_handler(
                    servicer.EndCommunication,
                    request_deserializer=api__pb2.NoParams.FromString,
                    response_serializer=api__pb2.Response.SerializeToString,
            ),
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=api__pb2.PublishPayload.FromString,
                    response_serializer=api__pb2.Response.SerializeToString,
            ),
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=api__pb2.Channel.FromString,
                    response_serializer=api__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'communicationsapi.CommunicationsApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CommunicationsApi(object):
    """subscribe(topic: string, onMessage: (message: Buffer) => void): void
    unsubscribe(topic: string, onMessage: (message: Buffer) => void): void
    publish(topic: string, message: Buffer): Promise<void>
    getSubscribers(topic: string): Promise<[]>
    """

    @staticmethod
    def PingChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/communicationsapi.CommunicationsApi/PingChannel',
            api__pb2.NoParams.SerializeToString,
            api__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConnectToCommunicationsNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/communicationsapi.CommunicationsApi/ConnectToCommunicationsNode',
            api__pb2.NoParams.SerializeToString,
            api__pb2.Notification.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndCommunication(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/communicationsapi.CommunicationsApi/EndCommunication',
            api__pb2.NoParams.SerializeToString,
            api__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/communicationsapi.CommunicationsApi/Publish',
            api__pb2.PublishPayload.SerializeToString,
            api__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/communicationsapi.CommunicationsApi/Subscribe',
            api__pb2.Channel.SerializeToString,
            api__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
